use std::{path::Path, vec, io::Write};
use regex::Regex;
use std::{env, fs};
use walkdir::WalkDir;

fn main() {
    let current_dir = env::current_dir().unwrap_or_else(|_| panic!("Failed to get current dir"));

    let file_outpath = Path::new(&current_dir).join("register").join("src").join("blocks.rs");
    let mut file_block = fs::File::create(file_outpath).unwrap();
    file_block.write_all("// This file is generated by build.rs\n".as_bytes()).unwrap();
    file_block.write_all("use block::Block;\nuse block::SimpleBlock;\n\n".as_bytes()).unwrap();

    let file_outpath = Path::new(&current_dir).join("register").join("src").join("items.rs");
    let mut file_item = fs::File::create(file_outpath).unwrap();
    file_item.write_all("// This file is generated by build.rs\n".as_bytes()).unwrap();
    file_item.write_all("use item::Item;\nuse item::SimpleItem;\n\n".as_bytes()).unwrap();
    
    let mut block_register = vec![];
    let mut item_register = vec![];

    for entry in WalkDir::new(".")
        .into_iter()
        .filter_map(Result::ok)
        .filter(|e| !e.file_type().is_dir()) {
        let path = entry.path();
        let path_str = path.to_str().unwrap();

        let mut lib_path = path_str.replace("src\\", "");
        lib_path = lib_path.replace("src/", "");
        lib_path = lib_path.replace(".\\", "");
        lib_path = lib_path.replace("./", "");
        lib_path = lib_path.replace(".rs", "");
        lib_path = lib_path.replace("\\", "::");
        lib_path = lib_path.replace("/", "::");
        
        if path_str.contains("target") {
            continue;
        }

        if path_str.ends_with(".rs") {
            let file_name = fs::read_to_string(path).unwrap();
            let re = Regex::new(r"#\[register\(Block\)\]\npub mod (\w+)").unwrap();
            for cap in re.captures_iter(&file_name) {
                file_block.write_all(format!("pub use {}::{};\n", lib_path, &cap[1]).as_bytes()).unwrap();
                block_register.push(cap[1].to_string());
            }

            let re = Regex::new(r"#\[register\(Item\)\]\npub mod (\w+)").unwrap();
            for cap in re.captures_iter(&file_name) {
                file_item.write_all(format!("pub use {}::{};\n", lib_path, &cap[1]).as_bytes()).unwrap();
                item_register.push(cap[1].to_string());
            }
        }
    }

    file_block.write_all("\npub static REGISTER_BLOCK: &[fn(Block) -> SimpleBlock] = &[\n".as_bytes()).unwrap();

    let mut n = 0;

    for i in block_register {
        file_block.write_all(format!("    {}::new,{}// {}\n", i, "\t".repeat(4-((i.len()+2)/4)),n).as_bytes()).unwrap();
        n += 1;
    }

    file_block.write_all("];\n".as_bytes()).unwrap();

    file_item.write_all("\npub static REGISTER_ITEM: &[fn(Item) -> SimpleItem] = &[\n".as_bytes()).unwrap();

    n = 0;

    for i in item_register {
        file_item.write_all(format!("    {}::new,{}// {}\n", i, "\t".repeat(4-((i.len()+2)/4)),n).as_bytes()).unwrap();
        n += 1;
    }

    file_item.write_all("];\n".as_bytes()).unwrap();

    
    println!("cargo:rerun-if-changed=.");
}
